array: 
- topic: Reactとは
  main_topic: 近年の開発言語トレンドとしてよく取り上げられるReact。名前は知っていても、どのようなもので、用途を知る人は少ないのではないか？
  question: そもそもReactとは何なのだろう？どうしてトレンド入りしているのだろう？他の言語と何が違うのだろう？
  answer: <blockquote>Reactとは、WebサイトやWebアプリのUI部分を開発する際に活用するJavaScriptライブラリです。ReactはReact.js（React.JS）と表記されることもあります。ReactはFacebook社が開発し、2013年にオープンソース化されました。～（中略）～ ReactのようなUI用ライブラリやフレームワークが注目されている背景として、SPAの普及があげられます。SPAとは「Single Page Application」の略で、文字通り1つのページだけで使えるWebアプリケーションのことです。～（中略）～ SPAでは1つのページで全ての処理を完結させる必要上、同じページにたくさんの機能が集約されることになります。しかし、うまく整理して機能をページ内に配置しないと、UIは雑然として使いにくくなってしまうのです。その点Reactをはじめとしたライブラリやフレームワークを使えば、クオリティの高いUIを簡単かつ効率的に開発できます。（【初心者向け】Reactとは？注目されている背景や特徴・メリットを解説  カゴヤのサーバー研究室  https://www.kagoya.jp/howto/it-glossary/develop/react/）。</blockquote><br>つまりJavascriptの一種で、クオリティの高いUIを簡単かつ効果的に開発することができるもののようだ。
  situation: 近年のアプリの普及に伴って、開発サイドはより競争にさらされる。そうした中で、ユーザーによりクオリティの高い利用体験を行ってもらうため、Reactという言語は存在していると言える。
  complex: では、SPAがここまで注目される背景には何があるのだろうか？
  checking_q_and_a: 端的に言えば、<blockquote>サーバーのレスポンスを待つことなく画面遷移を実施することができるため、WEBアプリケーションの操作速度を向上させることができる"（SPA(シングルページアプリケーション)とは？【モダンフロントの技術を紹介！】 | SPA(シングルページアプリケーション)とは？【モダンフロントの技術を紹介！】 | https://read-engineer.com/2020/07/30/spa/）</blockquote>ユーザー体験として、まず重要なアクセスの速さという点を達成できることは大きい。
- topic: ReactとJSX
  main_topic: 先のトピックで、ReactとはJavascriptのライブラリという話をした。では、どのような点において、Javascriptの特徴があるのだろうか？今回は、JSXについて取り上げたい。
  question: JSXとは何か？何かの略称なのか？
  answer: <blockquote>JSXとは、「JavaScript XML」の略であり、HTMLと似たような記述をすることができる。「Javascriptの拡張構文」です。JSXを使うと、div,p,ul,liなどのHTMLタグを使用することが可能です。簡単な言葉で説明すると「ReactでHTMLを書くための構文」となります。（Reactで使用するJSXとは？ | JavaScript構文を徹底解説します | High Career Blog | https://high-career.jp/2022/02/28/jsx/#:~:text=JSX%E3%81%A8%E3%81%AF%E3%80%81%E3%80%8CJavaScript%20XML,%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%96%87%E3%80%8D%E3%81%A8%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82）</blockquote>Javascript上でHTMLを扱うことのできる構文のことのようだ。
  situation: 今までのJavascriptといえばHTMLの中に記述することが定石だったと思うが、ここで立場の逆転が見られた訳だ。
  complex: では、JSXで記述することは、今までのHTMLの中に記述することとどのような差異があるのだろう？
  checking_q_and_a: <blockquote>下記からわかるように、JSXで記述した方が、非エンジニアやReactを学んでいない方にも分かりやすく、導入のハードルを下げることが可能です。<br>▼JSだけで記述した場合<br><pre><code>React.DOM.div(null, 'test')</code></pre>▼JSXで記述した場合<br><pre><code>&lt;div&gt;test&lt;/div&gt;の方が...</code></pre></blockquote>（Reactで使用するJSXとは？ | JavaScript構文を徹底解説します | High Career Blog | https://high-career.jp/2022/02/28/jsx/#:~:text=JSX%E3%81%A8%E3%81%AF%E3%80%81%E3%80%8CJavaScript%20XML,%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%96%87%E3%80%8D%E3%81%A8%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82）
- topic: Reactと仮想DOM
  main_topic: 今回は仮想DOMについて取り上げてみたい。
  question: 仮想DOMとは何なのだろうか？
  answer: <blockquote>仮想DOMとは、DOMの状態をメモリ上に保持しておいて、更新前と更新後の状態を比較して、必要最小限の部分だけを更新するという機能です。DOMの更新が最小限で済むので、パフォーマンスが非常に良いのが特徴です。HTMLというのは、ツリー構造となっています。ツリー構造というのは、その名の通り、木のようなデータ構造のことです。これは、PCのフォルダ構造にも採用されていますが、一本の枝から、複数の枝が生えており、その複数の一本を見ると、さらに別の複数の枝が生えている…というような構造です。～（中略）～ Virtual DOMでは、このDOMの状態がメモリ上にあり、DOMを更新した時に、その差分のみを書き換えるというものです。（出典：「いまどきのJSプログラマーのためのNode.jsとReactアプリケーション開発テクニック」 | 出版社：ソシム株式会社 | 著者：クジラ飛行机 ）</blockquote>つまり、Javascript上でHTMLを扱う際に効果的な技術になる。
  situation: 仮想DOMという技術を使うことによって、処理の高速化を実現することが出来そうだ。Javascriptのような動的なUIを実現するに当たり、これは非常に大きい。
  complex: 仮想DOMと比較されるものとしてリアルDOMというのがあるが、これはいったい何なのだろうか？
  checking_q_and_a: <blockquote>これは、WebブラウザがHTMLドキュメントをレンダリング（コンテンツをブラウザの画面に表示する処理）することで画面を描画する。そして、HTMLの解析→レンダリングツリーの構築（DOMツリー・CSSツリー→レンダリングツリー）→レイアウト処理→描画という４つのステップを踏む。ブラウザはDOM操作イベントによって発火し、レンダリング処理を行う（再レンダリング）。レンダリングはブラウザにとってコストの高い処理である。対して、バーチャルDOMはブラウザ上にはなく、メモリ上に保存されている。UIが変更された場合は変更後の仮想DOM構造体を作成し、メモリ上にある変更前の仮想DOM構造体と比較して、異なる部分だけを抽出してくる。差分検知をメモリ上で素早く行い、抽出した差分をリアルDOMに適用するので、ブラウザは必要な分だけのレンダリングで済む。（仮想DOMとリアルDOM | Qiita | https://qiita.com/_lemoo_/items/5d295cba251b1e697939）</blockquote>どうしてもUIが変更された際にWebブラウザがHTMLドキュメントをレンダリングする処理に時間がかかってしまうというのは明らかだと思うが、仮想DOMでは、検知した差分をリアルDOMに適用するという点が優れていると言える。
- topic: Reactでコンポーネントを作成する。
  main_topic: Reactのコンポーネント作成方法について考えてみたい。
  question: では、コンポーネントとは何で、あることによって何が嬉しいのだろうか？
  answer: <blockquote>Reactの魅力は何といっても、HTMLをコンポーネントとして定義し、それを自由に組み合わせて使うことができる点にあります。～（中略）～ コンポーネントとは、特定の機能を持った汎用的な「部品」を指す言葉です。～（中略）～ Reactでコンポーネントを作るには、特別な何かを記述する必要はありません。JSXでコンテンツを返す関数を定義するだけでいいのです。例えば、Greetingというコンポーネントを定義する例をいかに挙げます。これは、引数のprops.typeに与えられた文字列を&lt;h1&gt;タグで囲んで表示するという簡単なコンポーネントです。<br><br><pre><code>//Reactでコンポーネント定義したところ<br>function Greeting (props) {<br>     return &lt;h1&gt;{props.type}&lt;/h1&gt;<br>}</code></pre>（出典：「いまどきのJSプログラマーのためのNode.jsとReactアプリケーション開発テクニック」 | 出版社：ソシム株式会社 | 著者：クジラ飛行机 ）</blockquote>
  situation: Reactを記述する際に、コンポーネントを使うことで、汎用的なHTML形式の部品を作ることができ、これによりアプリのメンテナンス性が向上するのが嬉しいということが分かった。
  complex: 更に、本格的なコンポーネントを作るとなると、内部状態を持つことができるようだ。これはいったいどのようなものなのだろう？
  checking_q_and_a: 詳しくは次のトピックで記載するが、チェックボックスなど、状態によって見た目が大きく変化するコンポーネントを作る場合に使用できるものだ。
- topic: Reactで本格的なコンポーネントを作成する。
  main_topic: 前トピックで、Reactにはコンポーネントという記述の仕方が存在することを学んだ。本トピックでは、より本格的なコンポーネントを作る際に使う記述方法について学ぶ。
  question: 少しフライングして説明したが、内部状態を持つ際の構文はどのようなものだろうか？
  answer: 下記のように記述することで、コンポーネント状態の参照と更新ができる。<br><pre><code>//状態を参照する<br>console.log( this.state.名前 )<br><br>//状態を更新する<br>this.setState( {名前. 新しい値} )</code></pre>
  situation: シンプルな1行で状態の参照・更新ができることが分かった。
  complex: 気を付ける点はあるだろうか？
  checking_q_and_a: 最初に下記のように初期化を行う必要がある。<br><pre><code>class コンポーネント名 extends React.Component {<br>  //状態を初期化する<br>  constructor (props) {<br>    this.state = { 初期値 }<br>  }</code></pre>
- topic: コンポーネントについて改めて考える。
  main_topic: <blockquote>コンポーネントというのは部品であって、コンポーネントの外に何か影響を及ぼすものではなく、部品の中だけで完結していることが望ましいと言えます。その点はReactのコンポーネントも同じです。Reactのコンポーネントでは、外部との窓口を設け、その窓口を通じてのみ、外部と連携できる様になっています。それは、あたかも、レゴブロック凹凸に似ていると言えるでしょう。</blockquote>
  question: では、具体的に「窓口」は何を指すのか？
  answer: <blockquote>Reactのコンポーネントで外部の窓口となるのは、要素のプロパティ（タグの属性）です。このプロパティを通じて外部と連携します。外部からのコンポーネントのプロパティを編集することはできません。つまり、コンポーネントから見てプロパティは読み取り専用ということになります。</blockquote>
  situation: 
  complex: <blockquote>では、コンポーネントの側で何かしら値に変化が生じたとき、それをどのように外部に通知すればいいでしょうか？</blockquote>
  checking_q_and_a: <blockquote>それは、HTMLの各要素でも実装されているように、onChangeやonSubmitなどのイベントを通じて伝えればいいのです。（出典：「いまどきのJSプログラマーのためのNode.jsとReactアプリケーション開発テクニック」 | 出版社：ソシム株式会社 | 著者：クジラ飛行机 ）</blockquote>
- topic: イベントの仕組みと実装
  main_topic: Reactでは、HTML/Javascriptにもともと用意されているイベントを直接使用せず、それらをラップした独自のイベントを使用する。
  question: 具体的にはどのようなものなのか？
  answer: 例えば、Javascriptでクリックイベントを設定するときは、属性「onclick」にJavascriptのコードを"clickHandler(e)"のように指定します。しかし、Reactでは、「onclick」ではなく、「onClick」イベントで指定します。そして、属性「onClick」に波括弧と共に関数オブジェクトを指定します。<br><pre><code>[一般的なJSでのクリックイベントの記述方法]<br>&lt;div onclick="clickHandler(e)"&gt;Click Me&lt;/div&gt;<br><br>[Reactでのクリックイベントの記述方法]<br>&lt;div onClick={clickHandler}&gt;Click Me&lt;/div&gt;</code></pre>
  situation: クリックイベントで、クラスのメソッドを呼びたいときがあります。
  complex: しかし、onClickで起動するイベントでは、thisがundifinedとなってしまします。
  checking_q_and_a: そこで、予めclickHandlerにthisを結びつけておくことで、正しくthisを認識できるようになります。<br><pre><code>//コンポーネントの定義<br>class Hello extends React.Component {<br> constructor (props) {<br>  super(props)<br>  //イベントハンドラをthisで結びつける<br>  this.clickHandler = this.clickHandler.bind(this)<br>...}}</code></pre>（出典：「いまどきのJSプログラマーのためのNode.jsとReactアプリケーション開発テクニック」 | 出版社：ソシム株式会社 | 著者：クジラ飛行机 ）
- topic: 状態とプロパティ
  main_topic: Reactコンポーネントの状態を表すのが、this.state.xxxであり、コンポーネントが持つ様々な値を表すプロパティが、this.props.xxxです。
  question: これらをどのように使い分けたらいいでしょうか？
  answer: まず、状態（state）とは、コンポーネントの状態を表す書き換え可能なデータのつまりです。そして、状態が変化すると、コンポーネントが再描画されます。一方、プロパティ（props）は、外部からコンポーネントへの窓口というべき役割をもっています。特に、コンポーネントを配置する親要素から設定されます。そして、一度設定されたプロパティは、基本的にコンポーネント内部で変更することはありません。（出典：「いまどきのJSプログラマーのためのNode.jsとReactアプリケーション開発テクニック」 | 出版社：ソシム株式会社 | 著者：クジラ飛行机 ）
  situation: React がユーザ定義のコンポーネントを見つけた場合、JSX に書かれている属性と子要素を単一のオブジェクトとしてこのコンポーネントに渡します。このオブジェクトのことを “props” と呼びます。
  complex: 詳しく説明しよう
  checking_q_and_a: 例えば以下のコードではページ上に “Hello, Sara” を表示します<br><pre><code>function Welcome(props) {<br>  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;<br>}<br>const root = ReactDOM.createRoot(document.getElementById('root'));<br>const element = &lt;Welcome name="Sara" /&gt;;<br>root.render(element);</code></pre><br>この例で何が起こるのかおさらいしてみましょう。<br>1. &lt;Welcome name="Sara" /&gt; という要素を引数として root.render() を呼び出します。<br>2. React は Welcome コンポーネントを呼び出し、そのときに props として {name： 'Sara'} を渡します。<br>3. Welcome コンポーネントは出力として &lt;h1&gt;Hello, Sara&lt;/h1&gt; 要素を返します。<br>4. React DOM は &lt;h1&gt;Hello, Sara&lt;/h1&gt; に一致するよう、DOM を効率的に更新します。<br>コンポーネントを関数で宣言するかクラスで宣言するかに関わらず、自分自身の props は決して変更してはいけません。この sum 関数を考えましょう<br><br><pre><code>function sum(a, b) {<br>  return a + b;<br>}</code></pre>このような関数は入力されたものを変更しようとせず、同じ入力に対し同じ結果を返すので “純粋 (pure)” であると言われます。<br>対照的に、以下の関数は自身への入力を変更するため純関数ではありません<br><br><pre><code>function withdraw(account, amount) {<br>  account.total -= amount;<br>}</code></pre>React は柔軟ですが、1 つだけ厳格なルールがあります<br>全ての React コンポーネントは、自己の props に対して純関数のように振る舞わねばなりません。（コンポーネントと props | React公式ドキュメント | https://ja.legacy.reactjs.org/docs/components-and-props.html）
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
