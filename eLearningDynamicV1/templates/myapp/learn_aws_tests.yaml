array:
- q: デフォルトで一つのリージョンに作成できるVPCの上限数は次のうちいくつか？
  sa: '5'
  sb: '10'
  sc: '50'
  sd: '100'
  a: '5'
  a_des: デフォルトの制限は、１リージョンあたり 5 VPCとなります。ただし、AWSへ専用フォームからリクエストすれば、ニーズに応じてリージョンあたり 100 個の VPC を持つことができます。
- q: グローバルイベントの主催者は、日次レポートを静的なHTMLページとしてオンラインに配置したいと考えています。このページは、世界中のユーザーから何百万ものビューを生成すると予想されています。ファイルはAmazon S3バケットに保存されます。ソリューションアーキテクトは、効率的で効果的なソリューションを設計するように求められています。これを達成するためにソリューションアーキテクトはどのアクションを実行する必要がありますか？
  sa: ファイルの署名付きURLを生成する
  sb: すべてのリージョンに対してクロスリージョンレプリケーションを使用する
  sc: Amazon Route 53の地理的近接性ルーティングを使用する
  sd: S3バケットをオリジンとしてAmazon CloudFrontを使用する
  a: S3バケットをオリジンとしてAmazon CloudFrontを使用する
  a_des: 問題文に世界中のユーザが利用となるので、CloudFrontを使用するのが正解となります。Amazon CloudFront は、データ、動画、アプリケーション、および API をすべてデベロッパーにとって使いやすい環境で、低レイテンシーの高速転送により世界中の視聴者に安全に配信する高速コンテンツ配信ネットワーク (CDN) サービスです。
- q: AWSにおける可用性向上策として間違っているものは次のうちどれですか？
  sa: リソースを冗長化する
  sb: 地理的に離れた場所で冗長化する
  sc: システムを疎結合で構築する
  sd: ステートレスな設計とする
  a: ステートレスな設計とする
  a_des: ステートレスやステートフルは状態管理のアーキテクチャであり、可用性とは無関係となります。
- q: S3に関する説明として正しいものは次のうちどれですか？
  sa: 削除されたデータは、参照タイミングにかかわらずデータを参照されることはない
  sb: S3で更新されたデータは一貫性が保証されている
  sc: 更新されたデータは即座に更新データをGETで参照できる
  sd: S3に新規追加されたデータは、参照タイミングによらず一貫性が担保されている
  a: S3に新規追加されたデータは、参照タイミングによらず一貫性が担保されている
  a_des: S3の新規追加は、書き込み後の読み込み整合性は担保されているため、参照タイミングによらず、一貫性が保証される。S3の削除は、結果整合性のため、参照タイミングによっては削除前のデータが参照される場合がある。S3の更新は、結果整合性のため、参照タイミングによっては更新前のデータが参照される場合がある
- q: ある企業は AWS でアプリケーションをホストしています。同社は Amazon Cognito を使用してユーザーを管理しています。ユーザーがアプリケーションにログインすると、アプリケーションは、Amazon API Gateway でホストされている REST API を使用して、Amazon DynamoDB から必要なデータを取得します。同社は、開発労力を軽減するために、REST API へのアクセスを制御する AWS マネージド ソリューションを望んでいます。運用オーバーヘッドを最小限に抑えながらこれらの要件を満たすソリューションはどれですか?
  sa: AWS Lambda 関数を API Gateway の承認者として設定し、どのユーザーがリクエストを行ったかを検証します。
  sb: ユーザーごとに、リクエストごとに送信する必要がある API キーを作成して割り当てます。AWS Lambda 関数を使用してキーを検証します。
  sc: すべてのリクエストのヘッダーにユーザーの電子メール アドレスを送信します。AWS Lambda 関数を呼び出して、そのメール アドレスを持つユーザーに適切なアクセス権があることを検証します。
  sd: API Gateway で Amazon Cognito ユーザープールオーソライザーを設定し、Amazon Cognito が各リクエストを検証できるようにします。
  a: ユーザーごとに、リクエストごとに送信する必要がある API キーを作成して割り当てます。AWS Lambda 関数を使用してキーを検証します。
  a_des: Amazon Cognito ユーザープールオーソライザーは、アクセス制御を提供する AWS マネージド ソリューションで、API Gateway を統合して各リクエストを検証することができます。これにより、開発労力と運用オーバーヘッドを最小限に抑えることができます。
- q: ある企業は最近、AWS アカウントの Amazon EC2 インスタンス上でさまざまな新しいワークロードを開始しました。企業は、インスタンスにリモートかつ安全にアクセスして管理するための戦略を作成する必要があります。同社は、ネイティブ AWS サービスと連携し、AWS Well-Architected フレームワークに従う反復可能なプロセスを実装する必要があります。運用オーバーヘッドを最小限に抑えながらこれらの要件を満たすソリューションはどれですか?
  sa: EC2 シリアル コンソールを使用して、管理のために各インスタンスのターミナル インターフェイスに直接アクセスします。
  sb: 適切な IAM ロールを既存のインスタンスと新しいインスタンスのそれぞれにアタッチします。AWS Systems Manager Session Manager を使用して、リモート SSH セッションを確立します。
  sc: 管理用 SSH キー ペアを作成します。公開キーを各 EC2 インスタンスにロードします。要塞ホストをパブリック サブネットにデプロイして、各インスタンスの管理用のトンネルを提供します。
  sd: AWS サイト間 VPN 接続を確立します。ローカルのオンプレミス マシンを使用し、VPN トンネル経由で SSH キーを使用してインスタンスに直接接続するように管理者に指示します。
  a: 適切な IAM ロールを既存のインスタンスと新しいインスタンスのそれぞれにアタッチします。AWS Systems Manager Session Manager を使用して、リモート SSH セッションを確立します。
  a_des: 既存および新しいインスタンスに適切なIAMロールをアタッチし、AWS Systems Manager Session Managerを使用してリモートSSHセッションを確立することで、ネイティブAWSサービスと連携し、運用オーバーヘッドを最小限に抑えながらインスタンスにリモートかつ安全にアクセスして管理するための戦略を提供します。
- q: ある開発者が、コンテナベースのサービス上にアプリケーションをデプロイしたいと考えています。サービスは、バックエンドインスタンスを自動的にプロビジョニングし、管理する必要があります。サービスは必要なリソースのみをプロビジョニングする必要があります。これらの要件を満たすAWSサービスはどれですか？
  sa: AWS Elastic Beanstalk
  sb: AWS Fargate
  sc: Amazon EC2 Container Service (ECS)
  sd: Amazon Elastic Kubernetes Service (EKS)
  a: AWS Fargate
  a_des: AWS Fargateは、サーバーレスコンテナ管理サービスであり、開発者がインフラストラクチャのプロビジョニングおよび管理を心配することなくアプリケーションをデプロイできます。必要なリソースのみをプロビジョニングし、コンテナベースのサービスを実行するには最適な選択肢です。
- q: ある開発者が、コンテナベースのサービス上にアプリケーションをデプロイしたいと考えています。サービスは、バックエンドインスタンスを自動的にプロビジョニングし、管理する必要があります。サービスは必要なリソースのみをプロビジョニングする必要があります。これらの要件を満たすAWSサービスはどれですか？
  sa: AWS Elastic Beanstalk
  sb: AWS Fargate
  sc: Amazon EC2 Container Service (ECS)
  sd: Amazon Elastic Kubernetes Service (EKS)
  a: AWS Fargate
  a_des: AWS Fargateは、サーバーレスコンテナ管理サービスであり、開発者がインフラストラクチャのプロビジョニングおよび管理を心配することなくアプリケーションをデプロイできます。必要なリソースのみをプロビジョニングし、コンテナベースのサービスを実行するには最適な選択肢です。

