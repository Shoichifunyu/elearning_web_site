array: 
- topic: Reactとは
  main_topic: 近年の開発言語トレンドとしてよく取り上げられるReact。名前は知っていても、どのようなもので、用途を知る人は少ないのではないか？
  question: そもそもReactとは何なのだろう？どうしてトレンド入りしているのだろう？他の言語と何が違うのだろう？
  answer: <blockquote>Reactとは、WebサイトやWebアプリのUI部分を開発する際に活用するJavaScriptライブラリです。ReactはReact.js（React.JS）と表記されることもあります。ReactはFacebook社が開発し、2013年にオープンソース化されました。～（中略）～ ReactのようなUI用ライブラリやフレームワークが注目されている背景として、SPAの普及があげられます。SPAとは「Single Page Application」の略で、文字通り1つのページだけで使えるWebアプリケーションのことです。～（中略）～ SPAでは1つのページで全ての処理を完結させる必要上、同じページにたくさんの機能が集約されることになります。しかし、うまく整理して機能をページ内に配置しないと、UIは雑然として使いにくくなってしまうのです。その点Reactをはじめとしたライブラリやフレームワークを使えば、クオリティの高いUIを簡単かつ効率的に開発できます。（【初心者向け】Reactとは？注目されている背景や特徴・メリットを解説  カゴヤのサーバー研究室  https://www.kagoya.jp/howto/it-glossary/develop/react/）。</blockquote><br>つまりJavascriptの一種で、クオリティの高いUIを簡単かつ効果的に開発することができるもののようだ。
  situation: 近年のアプリの普及に伴って、開発サイドはより競争にさらされる。そうした中で、ユーザーによりクオリティの高い利用体験を行ってもらうため、Reactという言語は存在していると言える。
  complex: では、SPAがここまで注目される背景には何があるのだろうか？
  checking_q_and_a: 端的に言えば、<blockquote>サーバーのレスポンスを待つことなく画面遷移を実施することができるため、WEBアプリケーションの操作速度を向上させることができる"（SPA(シングルページアプリケーション)とは？【モダンフロントの技術を紹介！】 | SPA(シングルページアプリケーション)とは？【モダンフロントの技術を紹介！】 | https://read-engineer.com/2020/07/30/spa/）</blockquote>ユーザー体験として、まず重要なアクセスの速さという点を達成できることは大きい。
- topic: ReactとJSX
  main_topic: 先のトピックで、ReactとはJavascriptのライブラリという話をした。では、どのような点において、Javascriptの特徴があるのだろうか？今回は、JSXについて取り上げたい。
  question: JSXとは何か？何かの略称なのか？
  answer: <blockquote>JSXとは、「JavaScript XML」の略であり、HTMLと似たような記述をすることができる。「Javascriptの拡張構文」です。JSXを使うと、div,p,ul,liなどのHTMLタグを使用することが可能です。簡単な言葉で説明すると「ReactでHTMLを書くための構文」となります。（Reactで使用するJSXとは？ | JavaScript構文を徹底解説します | High Career Blog | https://high-career.jp/2022/02/28/jsx/#:~:text=JSX%E3%81%A8%E3%81%AF%E3%80%81%E3%80%8CJavaScript%20XML,%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%96%87%E3%80%8D%E3%81%A8%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82）</blockquote>Javascript上でHTMLを扱うことのできる構文のことのようだ。
  situation: 今までのJavascriptといえばHTMLの中に記述することが定石だったと思うが、ここで立場の逆転が見られた訳だ。
  complex: では、JSXで記述することは、今までのHTMLの中に記述することとどのような差異があるのだろう？
  checking_q_and_a: <blockquote>下記からわかるように、JSXで記述した方が、非エンジニアやReactを学んでいない方にも分かりやすく、導入のハードルを下げることが可能です。<br>▼JSだけで記述した場合<br><pre><code>React.DOM.div(null, 'test')</code></pre>▼JSXで記述した場合<br><pre><code>&lt;div&gt;test&lt;/div&gt;の方が...</code></pre></blockquote>（Reactで使用するJSXとは？ | JavaScript構文を徹底解説します | High Career Blog | https://high-career.jp/2022/02/28/jsx/#:~:text=JSX%E3%81%A8%E3%81%AF%E3%80%81%E3%80%8CJavaScript%20XML,%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%96%87%E3%80%8D%E3%81%A8%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82）
- topic: Reactと仮想DOM
  main_topic: 今回は仮想DOMについて取り上げてみたい。
  question: 仮想DOMとは何なのだろうか？
  answer: <blockquote>仮想DOMとは、DOMの状態をメモリ上に保持しておいて、更新前と更新後の状態を比較して、必要最小限の部分だけを更新するという機能です。DOMの更新が最小限で済むので、パフォーマンスが非常に良いのが特徴です。HTMLというのは、ツリー構造となっています。ツリー構造というのは、その名の通り、木のようなデータ構造のことです。これは、PCのフォルダ構造にも採用されていますが、一本の枝から、複数の枝が生えており、その複数の一本を見ると、さらに別の複数の枝が生えている…というような構造です。～（中略）～ Virtual DOMでは、このDOMの状態がメモリ上にあり、DOMを更新した時に、その差分のみを書き換えるというものです。（出典：「いまどきのJSプログラマーのためのNode.jsとReactアプリケーション開発テクニック」 | 出版社：ソシム株式会社 | 著者：クジラ飛行机 ）</blockquote>つまり、Javascript上でHTMLを扱う際に効果的な技術になる。
  situation: 仮想DOMという技術を使うことによって、処理の高速化を実現することが出来そうだ。Javascriptのような動的なUIを実現するに当たり、これは非常に大きい。
  complex: 仮想DOMと比較されるものとしてリアルDOMというのがあるが、これはいったい何なのだろうか？
  checking_q_and_a: <blockquote>これは、WebブラウザがHTMLドキュメントをレンダリング（コンテンツをブラウザの画面に表示する処理）することで画面を描画する。そして、HTMLの解析→レンダリングツリーの構築（DOMツリー・CSSツリー→レンダリングツリー）→レイアウト処理→描画という４つのステップを踏む。ブラウザはDOM操作イベントによって発火し、レンダリング処理を行う（再レンダリング）。レンダリングはブラウザにとってコストの高い処理である。対して、バーチャルDOMはブラウザ上にはなく、メモリ上に保存されている。UIが変更された場合は変更後の仮想DOM構造体を作成し、メモリ上にある変更前の仮想DOM構造体と比較して、異なる部分だけを抽出してくる。差分検知をメモリ上で素早く行い、抽出した差分をリアルDOMに適用するので、ブラウザは必要な分だけのレンダリングで済む。（仮想DOMとリアルDOM | Qiita | https://qiita.com/_lemoo_/items/5d295cba251b1e697939）</blockquote>どうしてもUIが変更された際にWebブラウザがHTMLドキュメントをレンダリングする処理に時間がかかってしまうというのは明らかだと思うが、仮想DOMでは、検知した差分をリアルDOMに適用するという点が優れていると言える。
- topic: Reactでコンポーネントを作成する。
  main_topic: Reactのコンポーネント作成方法について考えてみたい。
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
- topic: 
  main_topic: 
  question: 
  answer: 
  situation: 
  complex: 
  checking_q_and_a: 
